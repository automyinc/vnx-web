
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_web_DatabaseBase_HXX_
#define INCLUDE_vnx_web_DatabaseBase_HXX_

#include <vnx/web/package.hxx>
#include <vnx/Hash128.h>
#include <vnx/Module.h>
#include <vnx/Object.h>
#include <vnx/query/Delete.hxx>
#include <vnx/query/Select.hxx>
#include <vnx/query/Update.hxx>


namespace vnx {
namespace web {

class DatabaseBase : public ::vnx::Module {
public:
	
	::std::string location = ".data/";
	::int64_t block_size = 67108864;
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	DatabaseBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const;
	const char* get_type_name() const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	friend std::ostream& operator<<(std::ostream& _out, const DatabaseBase& _value);
	friend std::istream& operator>>(std::istream& _in, DatabaseBase& _value);
	
	static const vnx::TypeCode* get_type_code();
	static std::shared_ptr<vnx::TypeCode> create_type_code();
	
protected:
	virtual void delete_from(const ::vnx::query::Delete& query) = 0;
	virtual void delete_many(const ::std::string& table, const ::std::vector<::vnx::Hash128>& ids) = 0;
	virtual void delete_one(const ::std::string& table, const ::vnx::Hash128& id) = 0;
	virtual ::std::map<::std::string, ::vnx::Object> get_table_info() const = 0;
	virtual void insert_many(const ::std::string& table, const ::std::map<::vnx::Hash128, ::vnx::Object>& objects) = 0;
	virtual void insert_one(const ::std::string& table, const ::vnx::Hash128& id, const ::vnx::Object& object) = 0;
	virtual ::std::vector<::vnx::Object> select(const ::vnx::query::Select& query) const = 0;
	virtual ::std::vector<::vnx::Object> select_many(const ::std::string& table, const ::std::vector<::vnx::Hash128>& ids) const = 0;
	virtual ::vnx::Object select_one(const ::std::string& table, const ::vnx::Hash128& id) const = 0;
	virtual void truncate(const ::std::string& table) = 0;
	virtual void update(const ::vnx::query::Update& query) = 0;
	virtual void update_many(const ::std::string& table, const ::std::map<::vnx::Hash128, ::vnx::Object>& objects) = 0;
	virtual void update_one(const ::std::string& table, const ::vnx::Hash128& id, const ::vnx::Object& object) = 0;
	virtual void write_new_block() = 0;
	
	void handle_switch(std::shared_ptr<const ::vnx::Sample> _sample);
	bool call_switch(vnx::TypeInput& _in, vnx::TypeOutput& _out, const vnx::TypeCode* _call_type, const vnx::TypeCode* _return_type);
	
};


} // namespace vnx
} // namespace web

#endif // INCLUDE_vnx_web_DatabaseBase_HXX_
