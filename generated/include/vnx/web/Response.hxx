
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_web_Response_HXX_
#define INCLUDE_vnx_web_Response_HXX_

#include <vnx/web/package.hxx>
#include <vnx/Hash128.h>
#include <vnx/Value.h>
#include <vnx/web/Content.hxx>
#include <vnx/web/Request.hxx>


namespace vnx {
namespace web {

class Response : public ::vnx::Value {
public:
	
	::vnx::Hash128 id;
	::std::shared_ptr<const ::vnx::web::Content> content;
	::int64_t time_to_live_ms = 0;
	::vnx::bool_t is_dynamic = true;
	
	typedef ::vnx::Value Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	vnx::Hash64 get_type_hash() const;
	const char* get_type_name() const;
	
	static ::std::shared_ptr<const ::vnx::web::Response> create(const ::std::shared_ptr<const ::vnx::web::Request>& request, const ::std::shared_ptr<const ::vnx::web::Content>& content);
	
	static std::shared_ptr<Response> create();
	std::shared_ptr<vnx::Value> clone() const;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code);
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	friend std::ostream& operator<<(std::ostream& _out, const Response& _value);
	friend std::istream& operator>>(std::istream& _in, Response& _value);
	
	static const vnx::TypeCode* get_type_code();
	static std::shared_ptr<vnx::TypeCode> create_type_code();
	
};


} // namespace vnx
} // namespace web

#endif // INCLUDE_vnx_web_Response_HXX_
