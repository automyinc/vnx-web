
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_web_PACKAGE_HXX_
#define INCLUDE_vnx_web_PACKAGE_HXX_

#include <vnx/Type.h>

#include <vnx/package.hxx>


namespace vnx {
namespace web {


class BinaryData;
class CacheBase;
class CacheEntry;
class Content;
class Directory;
class ErrorCode;
class File;
class FileInfo;
class FileSystemBase;
class HttpParserBase;
class HttpProcessorBase;
class HttpRequest;
class HttpResponse;
class ObjectFile;
class Parameter;
class Path;
class PollServerBase;
class Provider;
class Request;
class Response;
class StreamEvent;
class StreamRead;
class StreamWrite;
class TextFile;
class ValueFile;

} // namespace vnx
} // namespace web


namespace vnx {

void read(TypeInput& in, ::vnx::web::BinaryData& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::CacheBase& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::CacheEntry& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::Content& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::Directory& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::ErrorCode& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::File& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::FileInfo& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::FileSystemBase& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::HttpParserBase& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::HttpProcessorBase& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::HttpRequest& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::HttpResponse& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::ObjectFile& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::Parameter& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::Path& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::PollServerBase& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::Provider& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::Request& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::Response& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::StreamEvent& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::StreamRead& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::StreamWrite& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::TextFile& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::web::ValueFile& value, const TypeCode* type_code, const uint16_t* code);

void write(TypeOutput& out, const ::vnx::web::BinaryData& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::CacheBase& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::CacheEntry& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::Content& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::Directory& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::ErrorCode& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::File& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::FileInfo& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::FileSystemBase& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::HttpParserBase& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::HttpProcessorBase& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::HttpRequest& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::HttpResponse& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::ObjectFile& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::Parameter& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::Path& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::PollServerBase& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::Provider& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::Request& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::Response& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::StreamEvent& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::StreamRead& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::StreamWrite& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::TextFile& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::web::ValueFile& value, const TypeCode* type_code, const uint16_t* code);

void read(std::istream& in, ::vnx::web::BinaryData& value);
void read(std::istream& in, ::vnx::web::CacheBase& value);
void read(std::istream& in, ::vnx::web::CacheEntry& value);
void read(std::istream& in, ::vnx::web::Content& value);
void read(std::istream& in, ::vnx::web::Directory& value);
void read(std::istream& in, ::vnx::web::ErrorCode& value);
void read(std::istream& in, ::vnx::web::File& value);
void read(std::istream& in, ::vnx::web::FileInfo& value);
void read(std::istream& in, ::vnx::web::FileSystemBase& value);
void read(std::istream& in, ::vnx::web::HttpParserBase& value);
void read(std::istream& in, ::vnx::web::HttpProcessorBase& value);
void read(std::istream& in, ::vnx::web::HttpRequest& value);
void read(std::istream& in, ::vnx::web::HttpResponse& value);
void read(std::istream& in, ::vnx::web::ObjectFile& value);
void read(std::istream& in, ::vnx::web::Parameter& value);
void read(std::istream& in, ::vnx::web::Path& value);
void read(std::istream& in, ::vnx::web::PollServerBase& value);
void read(std::istream& in, ::vnx::web::Provider& value);
void read(std::istream& in, ::vnx::web::Request& value);
void read(std::istream& in, ::vnx::web::Response& value);
void read(std::istream& in, ::vnx::web::StreamEvent& value);
void read(std::istream& in, ::vnx::web::StreamRead& value);
void read(std::istream& in, ::vnx::web::StreamWrite& value);
void read(std::istream& in, ::vnx::web::TextFile& value);
void read(std::istream& in, ::vnx::web::ValueFile& value);

void write(std::ostream& out, const ::vnx::web::BinaryData& value);
void write(std::ostream& out, const ::vnx::web::CacheBase& value);
void write(std::ostream& out, const ::vnx::web::CacheEntry& value);
void write(std::ostream& out, const ::vnx::web::Content& value);
void write(std::ostream& out, const ::vnx::web::Directory& value);
void write(std::ostream& out, const ::vnx::web::ErrorCode& value);
void write(std::ostream& out, const ::vnx::web::File& value);
void write(std::ostream& out, const ::vnx::web::FileInfo& value);
void write(std::ostream& out, const ::vnx::web::FileSystemBase& value);
void write(std::ostream& out, const ::vnx::web::HttpParserBase& value);
void write(std::ostream& out, const ::vnx::web::HttpProcessorBase& value);
void write(std::ostream& out, const ::vnx::web::HttpRequest& value);
void write(std::ostream& out, const ::vnx::web::HttpResponse& value);
void write(std::ostream& out, const ::vnx::web::ObjectFile& value);
void write(std::ostream& out, const ::vnx::web::Parameter& value);
void write(std::ostream& out, const ::vnx::web::Path& value);
void write(std::ostream& out, const ::vnx::web::PollServerBase& value);
void write(std::ostream& out, const ::vnx::web::Provider& value);
void write(std::ostream& out, const ::vnx::web::Request& value);
void write(std::ostream& out, const ::vnx::web::Response& value);
void write(std::ostream& out, const ::vnx::web::StreamEvent& value);
void write(std::ostream& out, const ::vnx::web::StreamRead& value);
void write(std::ostream& out, const ::vnx::web::StreamWrite& value);
void write(std::ostream& out, const ::vnx::web::TextFile& value);
void write(std::ostream& out, const ::vnx::web::ValueFile& value);

void accept(Visitor& visitor, const ::vnx::web::BinaryData& value);
void accept(Visitor& visitor, const ::vnx::web::CacheBase& value);
void accept(Visitor& visitor, const ::vnx::web::CacheEntry& value);
void accept(Visitor& visitor, const ::vnx::web::Content& value);
void accept(Visitor& visitor, const ::vnx::web::Directory& value);
void accept(Visitor& visitor, const ::vnx::web::ErrorCode& value);
void accept(Visitor& visitor, const ::vnx::web::File& value);
void accept(Visitor& visitor, const ::vnx::web::FileInfo& value);
void accept(Visitor& visitor, const ::vnx::web::FileSystemBase& value);
void accept(Visitor& visitor, const ::vnx::web::HttpParserBase& value);
void accept(Visitor& visitor, const ::vnx::web::HttpProcessorBase& value);
void accept(Visitor& visitor, const ::vnx::web::HttpRequest& value);
void accept(Visitor& visitor, const ::vnx::web::HttpResponse& value);
void accept(Visitor& visitor, const ::vnx::web::ObjectFile& value);
void accept(Visitor& visitor, const ::vnx::web::Parameter& value);
void accept(Visitor& visitor, const ::vnx::web::Path& value);
void accept(Visitor& visitor, const ::vnx::web::PollServerBase& value);
void accept(Visitor& visitor, const ::vnx::web::Provider& value);
void accept(Visitor& visitor, const ::vnx::web::Request& value);
void accept(Visitor& visitor, const ::vnx::web::Response& value);
void accept(Visitor& visitor, const ::vnx::web::StreamEvent& value);
void accept(Visitor& visitor, const ::vnx::web::StreamRead& value);
void accept(Visitor& visitor, const ::vnx::web::StreamWrite& value);
void accept(Visitor& visitor, const ::vnx::web::TextFile& value);
void accept(Visitor& visitor, const ::vnx::web::ValueFile& value);

template<>
struct type<::vnx::web::BinaryData> {
	void read(TypeInput& in, ::vnx::web::BinaryData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::BinaryData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::BinaryData& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::BinaryData& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::BinaryData& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::CacheBase> {
	void read(TypeInput& in, ::vnx::web::CacheBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::CacheBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::CacheBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::CacheBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::CacheBase& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::CacheEntry> {
	void read(TypeInput& in, ::vnx::web::CacheEntry& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::CacheEntry& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::CacheEntry& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::CacheEntry& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::CacheEntry& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::Content> {
	void read(TypeInput& in, ::vnx::web::Content& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::Content& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::Content& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::Content& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::Content& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::Directory> {
	void read(TypeInput& in, ::vnx::web::Directory& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::Directory& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::Directory& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::Directory& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::Directory& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::ErrorCode> {
	void read(TypeInput& in, ::vnx::web::ErrorCode& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::ErrorCode& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::ErrorCode& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::ErrorCode& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::ErrorCode& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::File> {
	void read(TypeInput& in, ::vnx::web::File& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::File& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::File& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::File& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::File& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::FileInfo> {
	void read(TypeInput& in, ::vnx::web::FileInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::FileInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::FileInfo& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::FileInfo& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::FileInfo& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::FileSystemBase> {
	void read(TypeInput& in, ::vnx::web::FileSystemBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::FileSystemBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::FileSystemBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::FileSystemBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::FileSystemBase& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::HttpParserBase> {
	void read(TypeInput& in, ::vnx::web::HttpParserBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::HttpParserBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::HttpParserBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::HttpParserBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::HttpParserBase& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::HttpProcessorBase> {
	void read(TypeInput& in, ::vnx::web::HttpProcessorBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::HttpProcessorBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::HttpProcessorBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::HttpProcessorBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::HttpProcessorBase& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::HttpRequest> {
	void read(TypeInput& in, ::vnx::web::HttpRequest& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::HttpRequest& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::HttpRequest& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::HttpRequest& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::HttpRequest& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::HttpResponse> {
	void read(TypeInput& in, ::vnx::web::HttpResponse& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::HttpResponse& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::HttpResponse& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::HttpResponse& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::HttpResponse& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::ObjectFile> {
	void read(TypeInput& in, ::vnx::web::ObjectFile& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::ObjectFile& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::ObjectFile& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::ObjectFile& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::ObjectFile& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::Parameter> {
	void read(TypeInput& in, ::vnx::web::Parameter& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::Parameter& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::Parameter& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::Parameter& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::Parameter& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::Path> {
	void read(TypeInput& in, ::vnx::web::Path& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::Path& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::Path& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::Path& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::Path& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		const std::vector<int> tmp = {12, 12, 5};
		code.insert(code.end(), tmp.begin(), tmp.end());
	}
};

template<>
struct type<::vnx::web::PollServerBase> {
	void read(TypeInput& in, ::vnx::web::PollServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::PollServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::PollServerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::PollServerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::PollServerBase& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::Provider> {
	void read(TypeInput& in, ::vnx::web::Provider& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::Provider& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::Provider& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::Provider& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::Provider& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::Request> {
	void read(TypeInput& in, ::vnx::web::Request& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::Request& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::Request& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::Request& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::Request& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::Response> {
	void read(TypeInput& in, ::vnx::web::Response& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::Response& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::Response& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::Response& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::Response& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::StreamEvent> {
	void read(TypeInput& in, ::vnx::web::StreamEvent& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::StreamEvent& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::StreamEvent& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::StreamEvent& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::StreamEvent& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::StreamRead> {
	void read(TypeInput& in, ::vnx::web::StreamRead& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::StreamRead& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::StreamRead& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::StreamRead& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::StreamRead& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::StreamWrite> {
	void read(TypeInput& in, ::vnx::web::StreamWrite& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::StreamWrite& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::StreamWrite& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::StreamWrite& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::StreamWrite& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::TextFile> {
	void read(TypeInput& in, ::vnx::web::TextFile& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::TextFile& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::TextFile& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::TextFile& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::TextFile& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::web::ValueFile> {
	void read(TypeInput& in, ::vnx::web::ValueFile& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::web::ValueFile& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::web::ValueFile& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::web::ValueFile& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::web::ValueFile& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};


} // namespace vnx

#endif // INCLUDE_vnx_web_PACKAGE_HXX_
