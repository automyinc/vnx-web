
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_web_stream_event_t_HXX_
#define INCLUDE_vnx_web_stream_event_t_HXX_

#include <vnx/Type.h>
#include <vnx/web/package.hxx>
#include <vnx/Hash128.h>


namespace vnx {
namespace web {

struct stream_event_t {
	
	static const ::int32_t EVENT_NEW = 1;
	static const ::int32_t EVENT_CLOSE = 3;
	static const ::int32_t EVENT_EOF = 4;
	
	::vnx::Hash128 stream;
	::int32_t event = 0;
	::int32_t value = 0;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	vnx::Hash64 get_type_hash() const;
	const char* get_type_name() const;
	
	static ::vnx::web::stream_event_t create(const ::vnx::Hash128& stream, const ::int32_t& event);
	static ::vnx::web::stream_event_t create_with_value(const ::vnx::Hash128& stream, const ::int32_t& event, const ::int32_t& value);
	
	static std::shared_ptr<stream_event_t> create();
	std::shared_ptr<stream_event_t> clone() const;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code);
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	friend std::ostream& operator<<(std::ostream& _out, const stream_event_t& _value);
	friend std::istream& operator>>(std::istream& _in, stream_event_t& _value);
	
	static const vnx::TypeCode* get_type_code();
	static std::shared_ptr<vnx::TypeCode> create_type_code();
	
};


} // namespace vnx
} // namespace web

#endif // INCLUDE_vnx_web_stream_event_t_HXX_
