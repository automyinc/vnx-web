
// AUTO GENERATED by vnxcppcodegen

#include <vnx/web/package.hxx>
#include <vnx/web/ValueFile.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>
#include <vnx/Visitor.h>
#include <vnx/Struct.h>


namespace vnx {
namespace web {


const vnx::Hash64 ValueFile::VNX_TYPE_HASH(0x5be5d32e3d71e8edull);
const vnx::Hash64 ValueFile::VNX_CODE_HASH(0xcbb6356155445990ull);

vnx::Hash64 ValueFile::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* ValueFile::get_type_name() const {
	return "vnx.web.ValueFile";
}

std::shared_ptr<ValueFile> ValueFile::create() {
	return std::make_shared<ValueFile>();
}

std::shared_ptr<vnx::Value> ValueFile::clone() const {
	return std::make_shared<ValueFile>(*this);
}

void ValueFile::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void ValueFile::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void ValueFile::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = get_type_code();
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, mime_type);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, time_stamp_ms);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, data);
	_visitor.type_end(*_type_code);
}

void ValueFile::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"mime_type\": "; vnx::write(_out, mime_type);
	_out << ", \"time_stamp_ms\": "; vnx::write(_out, time_stamp_ms);
	_out << ", \"data\": "; vnx::write(_out, data);
	_out << "}";
}

void ValueFile::read(std::istream& _in) {
	std::map<std::string, std::string> _object;
	vnx::read_object(_in, _object);
	for(const auto& _entry : _object) {
		if(_entry.first == "mime_type") {
			vnx::from_string(_entry.second, mime_type);
		} else if(_entry.first == "time_stamp_ms") {
			vnx::from_string(_entry.second, time_stamp_ms);
		} else if(_entry.first == "data") {
			vnx::from_string(_entry.second, data);
		}
	}
}

std::ostream& operator<<(std::ostream& _out, const ValueFile& _value) {
	_value.write(_out);
	return _out;
}

std::istream& operator>>(std::istream& _in, ValueFile& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* ValueFile::get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(vnx::Hash64(0x5be5d32e3d71e8edull));
	if(!type_code) {
		type_code = vnx::register_type_code(create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> ValueFile::create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>(true);
	type_code->name = "vnx.web.ValueFile";
	type_code->type_hash = vnx::Hash64(0x5be5d32e3d71e8edull);
	type_code->code_hash = vnx::Hash64(0xcbb6356155445990ull);
	type_code->is_class = true;
	type_code->parents.resize(1);
	type_code->parents[0] = ::vnx::web::Content::get_type_code();
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<ValueFile>(); };
	type_code->fields.resize(3);
	{
		vnx::TypeField& field = type_code->fields[0];
		field.is_extended = true;
		field.name = "mime_type";
		field.code = {12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[1];
		field.name = "time_stamp_ms";
		field.code = {8};
	}
	{
		vnx::TypeField& field = type_code->fields[2];
		field.is_extended = true;
		field.name = "data";
		field.code = {16};
	}
	type_code->build();
	return type_code;
}


} // namespace vnx
} // namespace web


namespace vnx {

void read(TypeInput& in, ::vnx::web::ValueFile& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] != CODE_STRUCT)) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	const char* const _buf = in.read(type_code->total_field_size);
	{
		const vnx::TypeField* const _field = type_code->field_map[1];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.time_stamp_ms, _field->code.data());
		}
	}
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 0: vnx::read(in, value.mime_type, type_code, _field->code.data()); break;
			case 2: vnx::read(in, value.data, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vnx::web::ValueFile& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::write_type_code<::vnx::web::ValueFile>(out);
		vnx::write_class_header<::vnx::web::ValueFile>(out);
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(8);
	vnx::write_value(_buf + 0, value.time_stamp_ms);
	vnx::write(out, value.mime_type, type_code, type_code->fields[0].code.data());
	vnx::write(out, value.data, type_code, type_code->fields[2].code.data());
}

void read(std::istream& in, ::vnx::web::ValueFile& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vnx::web::ValueFile& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vnx::web::ValueFile& value) {
	value.accept(visitor);
}

} // vnx
