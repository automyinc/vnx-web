
// AUTO GENERATED by vnxcppcodegen

#include <vnx/web/package.hxx>
#include <vnx/web/DatabaseBase.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>
#include <vnx/Visitor.h>
#include <vnx/Object.h>
#include <vnx/Struct.h>
#include <vnx/Config.h>


namespace vnx {
namespace web {


const vnx::Hash64 DatabaseBase::VNX_TYPE_HASH(0x727e4ce696db9f27ull);
const vnx::Hash64 DatabaseBase::VNX_CODE_HASH(0xc8afdc5524351531ull);

DatabaseBase::DatabaseBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
	vnx::read_config(vnx_name + ".block_size", block_size);
	vnx::read_config(vnx_name + ".location", location);
}

vnx::Hash64 DatabaseBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* DatabaseBase::get_type_name() const {
	return "vnx.web.Database";
}

void DatabaseBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = get_type_code();
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, location);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, block_size);
	_visitor.type_end(*_type_code);
}

void DatabaseBase::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"location\": "; vnx::write(_out, location);
	_out << ", \"block_size\": "; vnx::write(_out, block_size);
	_out << "}";
}

void DatabaseBase::read(std::istream& _in) {
	std::map<std::string, std::string> _object;
	vnx::read_object(_in, _object);
	for(const auto& _entry : _object) {
		if(_entry.first == "block_size") {
			vnx::from_string(_entry.second, block_size);
		} else if(_entry.first == "location") {
			vnx::from_string(_entry.second, location);
		}
	}
}

vnx::Object DatabaseBase::to_object() const {
	vnx::Object _object;
	_object["location"] = location;
	_object["block_size"] = block_size;
	return _object;
}

void DatabaseBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "block_size") {
			_entry.second.to(block_size);
		} else if(_entry.first == "location") {
			_entry.second.to(location);
		}
	}
}

std::ostream& operator<<(std::ostream& _out, const DatabaseBase& _value) {
	_value.write(_out);
	return _out;
}

std::istream& operator>>(std::istream& _in, DatabaseBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* DatabaseBase::get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(vnx::Hash64(0x727e4ce696db9f27ull));
	if(!type_code) {
		type_code = vnx::register_type_code(create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> DatabaseBase::create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>(true);
	type_code->name = "vnx.web.Database";
	type_code->type_hash = vnx::Hash64(0x727e4ce696db9f27ull);
	type_code->code_hash = vnx::Hash64(0xc8afdc5524351531ull);
	type_code->methods.resize(14);
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.delete_from";
		call_type->type_hash = vnx::Hash64(0x5e8cc6e1c6ef55eull);
		call_type->code_hash = vnx::Hash64(0xf4bc052f07d471a1ull);
		call_type->is_method = true;
		call_type->depends.resize(1);
		call_type->depends[0] = ::vnx::query::Delete::get_type_code();
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.delete_from.return";
			return_type->type_hash = vnx::Hash64(0xc7e49eba408862dcull);
			return_type->code_hash = vnx::Hash64(0xed4b88353b200701ull);
			return_type->is_return = true;
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(1);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "query";
			field.code = {19, 0};
		}
		call_type->build();
		type_code->methods[0] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.delete_many";
		call_type->type_hash = vnx::Hash64(0xa1e72726216874aull);
		call_type->code_hash = vnx::Hash64(0xdf5c583e352478f2ull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.delete_many.return";
			return_type->type_hash = vnx::Hash64(0xb01760ed28996360ull);
			return_type->code_hash = vnx::Hash64(0xbef6aebce92cde0bull);
			return_type->is_return = true;
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(2);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "table";
			field.code = {12, 5};
		}
		{
			vnx::TypeField& field = call_type->fields[1];
			field.is_extended = true;
			field.name = "ids";
			field.code = {12, 11, 2, 4};
		}
		call_type->build();
		type_code->methods[1] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.delete_one";
		call_type->type_hash = vnx::Hash64(0xeae44baea1adf584ull);
		call_type->code_hash = vnx::Hash64(0xc146715756a16383ull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.delete_one.return";
			return_type->type_hash = vnx::Hash64(0xa7f632ac3884116eull);
			return_type->code_hash = vnx::Hash64(0x66d5d4ce5e71bc55ull);
			return_type->is_return = true;
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(2);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "table";
			field.code = {12, 5};
		}
		{
			vnx::TypeField& field = call_type->fields[1];
			field.is_extended = true;
			field.name = "id";
			field.code = {11, 2, 4};
		}
		call_type->build();
		type_code->methods[2] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.get_table_info";
		call_type->type_hash = vnx::Hash64(0x88f917f911bd2bccull);
		call_type->code_hash = vnx::Hash64(0x7bb02dc23e6fa274ull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.get_table_info.return";
			return_type->type_hash = vnx::Hash64(0x2b939572363d6513ull);
			return_type->code_hash = vnx::Hash64(0x95f3d2a9cc58d99cull);
			return_type->is_return = true;
			return_type->fields.resize(1);
			{
				vnx::TypeField& field = return_type->fields[0];
				field.is_extended = true;
				field.name = "_ret_0";
				field.code = {13, 4, 12, 5, 24};
			}
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->build();
		type_code->methods[3] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.insert_many";
		call_type->type_hash = vnx::Hash64(0xec50fc1151d954b7ull);
		call_type->code_hash = vnx::Hash64(0x6eeb89a77d3338a4ull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.insert_many.return";
			return_type->type_hash = vnx::Hash64(0x131f74a3f4bc7f75ull);
			return_type->code_hash = vnx::Hash64(0x9c7dab3842aa6e8cull);
			return_type->is_return = true;
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(2);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "table";
			field.code = {12, 5};
		}
		{
			vnx::TypeField& field = call_type->fields[1];
			field.is_extended = true;
			field.name = "objects";
			field.code = {13, 5, 11, 2, 4, 24};
		}
		call_type->build();
		type_code->methods[4] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.insert_one";
		call_type->type_hash = vnx::Hash64(0x42a9e757b5792b6full);
		call_type->code_hash = vnx::Hash64(0x7d473023ac9e4de7ull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.insert_one.return";
			return_type->type_hash = vnx::Hash64(0x5432ab6dd0723009ull);
			return_type->code_hash = vnx::Hash64(0x6359dc0e53b7b093ull);
			return_type->is_return = true;
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(3);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "table";
			field.code = {12, 5};
		}
		{
			vnx::TypeField& field = call_type->fields[1];
			field.is_extended = true;
			field.name = "id";
			field.code = {11, 2, 4};
		}
		{
			vnx::TypeField& field = call_type->fields[2];
			field.is_extended = true;
			field.name = "object";
			field.code = {24};
		}
		call_type->build();
		type_code->methods[5] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.select";
		call_type->type_hash = vnx::Hash64(0xf04a2aaf9cb0e29aull);
		call_type->code_hash = vnx::Hash64(0xf2905d89fbfba323ull);
		call_type->is_method = true;
		call_type->depends.resize(1);
		call_type->depends[0] = ::vnx::query::Select::get_type_code();
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.select.return";
			return_type->type_hash = vnx::Hash64(0x6527427765f42c08ull);
			return_type->code_hash = vnx::Hash64(0x16030b6269892913ull);
			return_type->is_return = true;
			return_type->fields.resize(1);
			{
				vnx::TypeField& field = return_type->fields[0];
				field.is_extended = true;
				field.name = "_ret_0";
				field.code = {12, 24};
			}
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(1);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "query";
			field.code = {19, 0};
		}
		call_type->build();
		type_code->methods[6] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.select_many";
		call_type->type_hash = vnx::Hash64(0xeb4d8eff80318a66ull);
		call_type->code_hash = vnx::Hash64(0x6de87e51fc4c25aaull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.select_many.return";
			return_type->type_hash = vnx::Hash64(0xecfb5ef74d325627ull);
			return_type->code_hash = vnx::Hash64(0xb7a48a8b73d059f5ull);
			return_type->is_return = true;
			return_type->fields.resize(1);
			{
				vnx::TypeField& field = return_type->fields[0];
				field.is_extended = true;
				field.name = "_ret_0";
				field.code = {12, 24};
			}
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(2);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "table";
			field.code = {12, 5};
		}
		{
			vnx::TypeField& field = call_type->fields[1];
			field.is_extended = true;
			field.name = "ids";
			field.code = {12, 11, 2, 4};
		}
		call_type->build();
		type_code->methods[7] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.select_one";
		call_type->type_hash = vnx::Hash64(0x86611a034e919efeull);
		call_type->code_hash = vnx::Hash64(0xc9f40fb636ad4a07ull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.select_one.return";
			return_type->type_hash = vnx::Hash64(0x7b51c2a475bda9b2ull);
			return_type->code_hash = vnx::Hash64(0xb1ac79740d75f4dbull);
			return_type->is_return = true;
			return_type->fields.resize(1);
			{
				vnx::TypeField& field = return_type->fields[0];
				field.is_extended = true;
				field.name = "_ret_0";
				field.code = {24};
			}
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(2);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "table";
			field.code = {12, 5};
		}
		{
			vnx::TypeField& field = call_type->fields[1];
			field.is_extended = true;
			field.name = "id";
			field.code = {11, 2, 4};
		}
		call_type->build();
		type_code->methods[8] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.truncate";
		call_type->type_hash = vnx::Hash64(0xe6cf9735afb55fa3ull);
		call_type->code_hash = vnx::Hash64(0x86bfe984dae7a1d1ull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.truncate.return";
			return_type->type_hash = vnx::Hash64(0x6712790c5fe1944eull);
			return_type->code_hash = vnx::Hash64(0xdde915451170ba8eull);
			return_type->is_return = true;
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(1);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "table";
			field.code = {12, 5};
		}
		call_type->build();
		type_code->methods[9] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.update";
		call_type->type_hash = vnx::Hash64(0xf420692382204f54ull);
		call_type->code_hash = vnx::Hash64(0x953fe5ff2c887db2ull);
		call_type->is_method = true;
		call_type->depends.resize(1);
		call_type->depends[0] = ::vnx::query::Update::get_type_code();
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.update.return";
			return_type->type_hash = vnx::Hash64(0xc355d08add2e631eull);
			return_type->code_hash = vnx::Hash64(0x769a2ce60652a36cull);
			return_type->is_return = true;
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(1);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "query";
			field.code = {19, 0};
		}
		call_type->build();
		type_code->methods[10] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.update_many";
		call_type->type_hash = vnx::Hash64(0xe9eb2eb755dce08ull);
		call_type->code_hash = vnx::Hash64(0x89b0606e0784d5a0ull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.update_many.return";
			return_type->type_hash = vnx::Hash64(0xa11ad38244682bfaull);
			return_type->code_hash = vnx::Hash64(0x70e0f90e7967b07bull);
			return_type->is_return = true;
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(2);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "table";
			field.code = {12, 5};
		}
		{
			vnx::TypeField& field = call_type->fields[1];
			field.is_extended = true;
			field.name = "objects";
			field.code = {13, 5, 11, 2, 4, 24};
		}
		call_type->build();
		type_code->methods[11] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.update_one";
		call_type->type_hash = vnx::Hash64(0x962f9f6ba7ceee1full);
		call_type->code_hash = vnx::Hash64(0x4b435c1d4e4b7402ull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.update_one.return";
			return_type->type_hash = vnx::Hash64(0xed019bf50c77ce8dull);
			return_type->code_hash = vnx::Hash64(0xc56fe00c8126ea44ull);
			return_type->is_return = true;
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(3);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "table";
			field.code = {12, 5};
		}
		{
			vnx::TypeField& field = call_type->fields[1];
			field.is_extended = true;
			field.name = "id";
			field.code = {11, 2, 4};
		}
		{
			vnx::TypeField& field = call_type->fields[2];
			field.is_extended = true;
			field.name = "object";
			field.code = {24};
		}
		call_type->build();
		type_code->methods[12] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "vnx.web.Database.write_new_block";
		call_type->type_hash = vnx::Hash64(0x464d56a64d6af720ull);
		call_type->code_hash = vnx::Hash64(0xf8e58d9010b7c192ull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "vnx.web.Database.write_new_block.return";
			return_type->type_hash = vnx::Hash64(0xbc036d5659d01f3dull);
			return_type->code_hash = vnx::Hash64(0x515a1290dc3b348aull);
			return_type->is_return = true;
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->build();
		type_code->methods[13] = vnx::register_type_code(call_type);
	}
	type_code->fields.resize(2);
	{
		vnx::TypeField& field = type_code->fields[0];
		field.is_extended = true;
		field.name = "location";
		field.value = vnx::to_string(".data/");
		field.code = {12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[1];
		field.name = "block_size";
		field.value = vnx::to_string(67108864);
		field.code = {8};
	}
	type_code->build();
	return type_code;
}

void DatabaseBase::handle_switch(std::shared_ptr<const ::vnx::Sample> _sample) {
	const uint64_t _type_hash = _sample->value->get_type_hash();
}

bool DatabaseBase::call_switch(vnx::TypeInput& _in, vnx::TypeOutput& _out, const vnx::TypeCode* _call_type, const vnx::TypeCode* _return_type) {
	if(_call_type->type_hash == vnx::Hash64(0x5e8cc6e1c6ef55eull)) {
		::vnx::query::Delete query;
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, query, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		delete_from(query);
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0xa1e72726216874aull)) {
		::std::string table;
		::std::vector<::vnx::Hash128> ids;
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, table, _call_type, _field->code.data()); break;
				case 1: vnx::read(_in, ids, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		delete_many(table, ids);
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0xeae44baea1adf584ull)) {
		::std::string table;
		::vnx::Hash128 id;
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, table, _call_type, _field->code.data()); break;
				case 1: vnx::read(_in, id, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		delete_one(table, id);
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0x88f917f911bd2bccull)) {
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		::std::map<::std::string, ::vnx::Object> _ret_0;
		_ret_0 = get_table_info();
		{
			vnx::write(_out, _ret_0, _return_type, _return_type->fields[0].code.data());
		}
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0xec50fc1151d954b7ull)) {
		::std::string table;
		::std::map<::vnx::Hash128, ::vnx::Object> objects;
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, table, _call_type, _field->code.data()); break;
				case 1: vnx::read(_in, objects, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		insert_many(table, objects);
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0x42a9e757b5792b6full)) {
		::std::string table;
		::vnx::Hash128 id;
		::vnx::Object object;
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, table, _call_type, _field->code.data()); break;
				case 1: vnx::read(_in, id, _call_type, _field->code.data()); break;
				case 2: vnx::read(_in, object, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		insert_one(table, id, object);
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0xf04a2aaf9cb0e29aull)) {
		::vnx::query::Select query;
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, query, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		::std::vector<::vnx::Object> _ret_0;
		_ret_0 = select(query);
		{
			vnx::write(_out, _ret_0, _return_type, _return_type->fields[0].code.data());
		}
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0xeb4d8eff80318a66ull)) {
		::std::string table;
		::std::vector<::vnx::Hash128> ids;
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, table, _call_type, _field->code.data()); break;
				case 1: vnx::read(_in, ids, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		::std::vector<::vnx::Object> _ret_0;
		_ret_0 = select_many(table, ids);
		{
			vnx::write(_out, _ret_0, _return_type, _return_type->fields[0].code.data());
		}
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0x86611a034e919efeull)) {
		::std::string table;
		::vnx::Hash128 id;
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, table, _call_type, _field->code.data()); break;
				case 1: vnx::read(_in, id, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		::vnx::Object _ret_0;
		_ret_0 = select_one(table, id);
		{
			vnx::write(_out, _ret_0, _return_type, _return_type->fields[0].code.data());
		}
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0xe6cf9735afb55fa3ull)) {
		::std::string table;
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, table, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		truncate(table);
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0xf420692382204f54ull)) {
		::vnx::query::Update query;
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, query, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		update(query);
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0xe9eb2eb755dce08ull)) {
		::std::string table;
		::std::map<::vnx::Hash128, ::vnx::Object> objects;
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, table, _call_type, _field->code.data()); break;
				case 1: vnx::read(_in, objects, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		update_many(table, objects);
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0x962f9f6ba7ceee1full)) {
		::std::string table;
		::vnx::Hash128 id;
		::vnx::Object object;
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, table, _call_type, _field->code.data()); break;
				case 1: vnx::read(_in, id, _call_type, _field->code.data()); break;
				case 2: vnx::read(_in, object, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		update_one(table, id, object);
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0x464d56a64d6af720ull)) {
		const char* const _buf = _in.read(_call_type->total_field_size);
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		write_new_block();
		return true;
	}
	return false;
}


} // namespace vnx
} // namespace web


namespace vnx {

void read(TypeInput& in, ::vnx::web::DatabaseBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code) {
		throw std::logic_error("read(): type_code == 0");
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: vnx::skip(in, type_code, code); return;
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	{
		const vnx::TypeField* const _field = type_code->field_map[1];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.block_size, _field->code.data());
		}
	}
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 0: vnx::read(in, value.location, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vnx::web::DatabaseBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::write_type_code<::vnx::web::DatabaseBase>(out);
		vnx::write_class_header<::vnx::web::DatabaseBase>(out);
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(8);
	vnx::write_value(_buf + 0, value.block_size);
	vnx::write(out, value.location, type_code, type_code->fields[0].code.data());
}

void read(std::istream& in, ::vnx::web::DatabaseBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vnx::web::DatabaseBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vnx::web::DatabaseBase& value) {
	value.accept(visitor);
}

} // vnx
