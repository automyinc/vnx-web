
// AUTO GENERATED by vnxcppcodegen

#include <vnx/web/package.hxx>
#include <vnx/web/DatabaseClient.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>


namespace vnx {
namespace web {

DatabaseClient::DatabaseClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

DatabaseClient::DatabaseClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

void DatabaseClient::delete_from(const ::vnx::query::Delete& query) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0x5e8cc6e1c6ef55eull));
	{
		vnx::write(_out, query, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::delete_from_async(const ::vnx::query::Delete& query) {
	vnx_is_async = true;
	delete_from(query);
}

void DatabaseClient::delete_many(const ::std::string& table, const ::std::vector<::vnx::Hash128>& ids) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0xa1e72726216874aull));
	{
		vnx::write(_out, table, _type_code, _type_code->fields[0].code.data());
		vnx::write(_out, ids, _type_code, _type_code->fields[1].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::delete_many_async(const ::std::string& table, const ::std::vector<::vnx::Hash128>& ids) {
	vnx_is_async = true;
	delete_many(table, ids);
}

void DatabaseClient::delete_one(const ::std::string& table, const ::vnx::Hash128& id) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0xeae44baea1adf584ull));
	{
		vnx::write(_out, table, _type_code, _type_code->fields[0].code.data());
		vnx::write(_out, id, _type_code, _type_code->fields[1].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::delete_one_async(const ::std::string& table, const ::vnx::Hash128& id) {
	vnx_is_async = true;
	delete_one(table, id);
}

::std::map<::std::string, ::vnx::Object> DatabaseClient::get_table_info() {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0x88f917f911bd2bccull));
	{
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
	
	vnx::BinaryInputStream _stream_in(vnx_return_data.get());
	vnx::TypeInput _in(&_stream_in);
	const vnx::TypeCode* _return_type = _type_code->return_type;
	::std::map<::std::string, ::vnx::Object> _ret_0;
	{
		const char* const _buf = _in.read(_return_type->total_field_size);
		for(const vnx::TypeField* _field : _return_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
				default: vnx::skip(_in, _return_type, _field->code.data());
			}
		}
	}
	return _ret_0;
}

void DatabaseClient::insert_many(const ::std::string& table, const ::std::map<::vnx::Hash128, ::vnx::Object>& objects) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0xec50fc1151d954b7ull));
	{
		vnx::write(_out, table, _type_code, _type_code->fields[0].code.data());
		vnx::write(_out, objects, _type_code, _type_code->fields[1].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::insert_many_async(const ::std::string& table, const ::std::map<::vnx::Hash128, ::vnx::Object>& objects) {
	vnx_is_async = true;
	insert_many(table, objects);
}

void DatabaseClient::insert_one(const ::std::string& table, const ::vnx::Hash128& id, const ::vnx::Object& object) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0x42a9e757b5792b6full));
	{
		vnx::write(_out, table, _type_code, _type_code->fields[0].code.data());
		vnx::write(_out, id, _type_code, _type_code->fields[1].code.data());
		vnx::write(_out, object, _type_code, _type_code->fields[2].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::insert_one_async(const ::std::string& table, const ::vnx::Hash128& id, const ::vnx::Object& object) {
	vnx_is_async = true;
	insert_one(table, id, object);
}

::std::vector<::vnx::Object> DatabaseClient::select(const ::vnx::query::Select& query) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0xf04a2aaf9cb0e29aull));
	{
		vnx::write(_out, query, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
	
	vnx::BinaryInputStream _stream_in(vnx_return_data.get());
	vnx::TypeInput _in(&_stream_in);
	const vnx::TypeCode* _return_type = _type_code->return_type;
	::std::vector<::vnx::Object> _ret_0;
	{
		const char* const _buf = _in.read(_return_type->total_field_size);
		for(const vnx::TypeField* _field : _return_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
				default: vnx::skip(_in, _return_type, _field->code.data());
			}
		}
	}
	return _ret_0;
}

::std::vector<::vnx::Object> DatabaseClient::select_many(const ::std::string& table, const ::std::vector<::vnx::Hash128>& ids) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0xeb4d8eff80318a66ull));
	{
		vnx::write(_out, table, _type_code, _type_code->fields[0].code.data());
		vnx::write(_out, ids, _type_code, _type_code->fields[1].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
	
	vnx::BinaryInputStream _stream_in(vnx_return_data.get());
	vnx::TypeInput _in(&_stream_in);
	const vnx::TypeCode* _return_type = _type_code->return_type;
	::std::vector<::vnx::Object> _ret_0;
	{
		const char* const _buf = _in.read(_return_type->total_field_size);
		for(const vnx::TypeField* _field : _return_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
				default: vnx::skip(_in, _return_type, _field->code.data());
			}
		}
	}
	return _ret_0;
}

::vnx::Object DatabaseClient::select_one(const ::std::string& table, const ::vnx::Hash128& id) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0x86611a034e919efeull));
	{
		vnx::write(_out, table, _type_code, _type_code->fields[0].code.data());
		vnx::write(_out, id, _type_code, _type_code->fields[1].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
	
	vnx::BinaryInputStream _stream_in(vnx_return_data.get());
	vnx::TypeInput _in(&_stream_in);
	const vnx::TypeCode* _return_type = _type_code->return_type;
	::vnx::Object _ret_0;
	{
		const char* const _buf = _in.read(_return_type->total_field_size);
		for(const vnx::TypeField* _field : _return_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
				default: vnx::skip(_in, _return_type, _field->code.data());
			}
		}
	}
	return _ret_0;
}

void DatabaseClient::truncate(const ::std::string& table) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0xe6cf9735afb55fa3ull));
	{
		vnx::write(_out, table, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::truncate_async(const ::std::string& table) {
	vnx_is_async = true;
	truncate(table);
}

void DatabaseClient::update(const ::vnx::query::Update& query) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0xf420692382204f54ull));
	{
		vnx::write(_out, query, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::update_async(const ::vnx::query::Update& query) {
	vnx_is_async = true;
	update(query);
}

void DatabaseClient::update_many(const ::std::string& table, const ::std::map<::vnx::Hash128, ::vnx::Object>& objects) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0xe9eb2eb755dce08ull));
	{
		vnx::write(_out, table, _type_code, _type_code->fields[0].code.data());
		vnx::write(_out, objects, _type_code, _type_code->fields[1].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::update_many_async(const ::std::string& table, const ::std::map<::vnx::Hash128, ::vnx::Object>& objects) {
	vnx_is_async = true;
	update_many(table, objects);
}

void DatabaseClient::update_one(const ::std::string& table, const ::vnx::Hash128& id, const ::vnx::Object& object) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0x962f9f6ba7ceee1full));
	{
		vnx::write(_out, table, _type_code, _type_code->fields[0].code.data());
		vnx::write(_out, id, _type_code, _type_code->fields[1].code.data());
		vnx::write(_out, object, _type_code, _type_code->fields[2].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::update_one_async(const ::std::string& table, const ::vnx::Hash128& id, const ::vnx::Object& object) {
	vnx_is_async = true;
	update_one(table, id, object);
}

void DatabaseClient::write_new_block() {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0x464d56a64d6af720ull));
	{
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::write_new_block_async() {
	vnx_is_async = true;
	write_new_block();
}


} // namespace vnx
} // namespace web
