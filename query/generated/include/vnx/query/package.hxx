
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_query_PACKAGE_HXX_
#define INCLUDE_vnx_query_PACKAGE_HXX_

#include <vnx/Type.h>

#include <vnx/package.hxx>


namespace vnx {
namespace query {


class Aggregate;
class And;
class Count;
class Delete;
class Equal;
class Expression;
class Field;
class Greater;
class GreaterEqual;
class GroupBy;
class Less;
class LessEqual;
class Limit;
class Max;
class Min;
class NotEqual;
class NotNull;
class Or;
class OrderBy;
class Query;
class Select;
class Sum;
class Update;
class Value;

} // namespace vnx
} // namespace query


namespace vnx {

void read(TypeInput& in, ::vnx::query::Aggregate& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::And& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Count& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Delete& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Equal& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Expression& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Field& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Greater& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::GreaterEqual& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::GroupBy& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Less& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::LessEqual& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Limit& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Max& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Min& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::NotEqual& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::NotNull& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Or& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::OrderBy& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Query& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Select& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Sum& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Update& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::vnx::query::Value& value, const TypeCode* type_code, const uint16_t* code);

void write(TypeOutput& out, const ::vnx::query::Aggregate& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::And& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Count& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Delete& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Equal& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Expression& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Field& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Greater& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::GreaterEqual& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::GroupBy& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Less& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::LessEqual& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Limit& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Max& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Min& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::NotEqual& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::NotNull& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Or& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::OrderBy& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Query& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Select& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Sum& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Update& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::vnx::query::Value& value, const TypeCode* type_code, const uint16_t* code);

void read(std::istream& in, ::vnx::query::Aggregate& value);
void read(std::istream& in, ::vnx::query::And& value);
void read(std::istream& in, ::vnx::query::Count& value);
void read(std::istream& in, ::vnx::query::Delete& value);
void read(std::istream& in, ::vnx::query::Equal& value);
void read(std::istream& in, ::vnx::query::Expression& value);
void read(std::istream& in, ::vnx::query::Field& value);
void read(std::istream& in, ::vnx::query::Greater& value);
void read(std::istream& in, ::vnx::query::GreaterEqual& value);
void read(std::istream& in, ::vnx::query::GroupBy& value);
void read(std::istream& in, ::vnx::query::Less& value);
void read(std::istream& in, ::vnx::query::LessEqual& value);
void read(std::istream& in, ::vnx::query::Limit& value);
void read(std::istream& in, ::vnx::query::Max& value);
void read(std::istream& in, ::vnx::query::Min& value);
void read(std::istream& in, ::vnx::query::NotEqual& value);
void read(std::istream& in, ::vnx::query::NotNull& value);
void read(std::istream& in, ::vnx::query::Or& value);
void read(std::istream& in, ::vnx::query::OrderBy& value);
void read(std::istream& in, ::vnx::query::Query& value);
void read(std::istream& in, ::vnx::query::Select& value);
void read(std::istream& in, ::vnx::query::Sum& value);
void read(std::istream& in, ::vnx::query::Update& value);
void read(std::istream& in, ::vnx::query::Value& value);

void write(std::ostream& out, const ::vnx::query::Aggregate& value);
void write(std::ostream& out, const ::vnx::query::And& value);
void write(std::ostream& out, const ::vnx::query::Count& value);
void write(std::ostream& out, const ::vnx::query::Delete& value);
void write(std::ostream& out, const ::vnx::query::Equal& value);
void write(std::ostream& out, const ::vnx::query::Expression& value);
void write(std::ostream& out, const ::vnx::query::Field& value);
void write(std::ostream& out, const ::vnx::query::Greater& value);
void write(std::ostream& out, const ::vnx::query::GreaterEqual& value);
void write(std::ostream& out, const ::vnx::query::GroupBy& value);
void write(std::ostream& out, const ::vnx::query::Less& value);
void write(std::ostream& out, const ::vnx::query::LessEqual& value);
void write(std::ostream& out, const ::vnx::query::Limit& value);
void write(std::ostream& out, const ::vnx::query::Max& value);
void write(std::ostream& out, const ::vnx::query::Min& value);
void write(std::ostream& out, const ::vnx::query::NotEqual& value);
void write(std::ostream& out, const ::vnx::query::NotNull& value);
void write(std::ostream& out, const ::vnx::query::Or& value);
void write(std::ostream& out, const ::vnx::query::OrderBy& value);
void write(std::ostream& out, const ::vnx::query::Query& value);
void write(std::ostream& out, const ::vnx::query::Select& value);
void write(std::ostream& out, const ::vnx::query::Sum& value);
void write(std::ostream& out, const ::vnx::query::Update& value);
void write(std::ostream& out, const ::vnx::query::Value& value);

void accept(Visitor& visitor, const ::vnx::query::Aggregate& value);
void accept(Visitor& visitor, const ::vnx::query::And& value);
void accept(Visitor& visitor, const ::vnx::query::Count& value);
void accept(Visitor& visitor, const ::vnx::query::Delete& value);
void accept(Visitor& visitor, const ::vnx::query::Equal& value);
void accept(Visitor& visitor, const ::vnx::query::Expression& value);
void accept(Visitor& visitor, const ::vnx::query::Field& value);
void accept(Visitor& visitor, const ::vnx::query::Greater& value);
void accept(Visitor& visitor, const ::vnx::query::GreaterEqual& value);
void accept(Visitor& visitor, const ::vnx::query::GroupBy& value);
void accept(Visitor& visitor, const ::vnx::query::Less& value);
void accept(Visitor& visitor, const ::vnx::query::LessEqual& value);
void accept(Visitor& visitor, const ::vnx::query::Limit& value);
void accept(Visitor& visitor, const ::vnx::query::Max& value);
void accept(Visitor& visitor, const ::vnx::query::Min& value);
void accept(Visitor& visitor, const ::vnx::query::NotEqual& value);
void accept(Visitor& visitor, const ::vnx::query::NotNull& value);
void accept(Visitor& visitor, const ::vnx::query::Or& value);
void accept(Visitor& visitor, const ::vnx::query::OrderBy& value);
void accept(Visitor& visitor, const ::vnx::query::Query& value);
void accept(Visitor& visitor, const ::vnx::query::Select& value);
void accept(Visitor& visitor, const ::vnx::query::Sum& value);
void accept(Visitor& visitor, const ::vnx::query::Update& value);
void accept(Visitor& visitor, const ::vnx::query::Value& value);

template<>
struct type<::vnx::query::Aggregate> {
	void read(TypeInput& in, ::vnx::query::Aggregate& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Aggregate& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Aggregate& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Aggregate& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Aggregate& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::And> {
	void read(TypeInput& in, ::vnx::query::And& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::And& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::And& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::And& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::And& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Count> {
	void read(TypeInput& in, ::vnx::query::Count& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Count& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Count& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Count& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Count& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Delete> {
	void read(TypeInput& in, ::vnx::query::Delete& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Delete& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Delete& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Delete& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Delete& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Equal> {
	void read(TypeInput& in, ::vnx::query::Equal& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Equal& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Equal& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Equal& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Equal& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Expression> {
	void read(TypeInput& in, ::vnx::query::Expression& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Expression& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Expression& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Expression& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Expression& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Field> {
	void read(TypeInput& in, ::vnx::query::Field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Field& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Field& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Field& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Greater> {
	void read(TypeInput& in, ::vnx::query::Greater& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Greater& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Greater& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Greater& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Greater& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::GreaterEqual> {
	void read(TypeInput& in, ::vnx::query::GreaterEqual& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::GreaterEqual& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::GreaterEqual& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::GreaterEqual& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::GreaterEqual& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::GroupBy> {
	void read(TypeInput& in, ::vnx::query::GroupBy& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::GroupBy& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::GroupBy& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::GroupBy& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::GroupBy& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Less> {
	void read(TypeInput& in, ::vnx::query::Less& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Less& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Less& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Less& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Less& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::LessEqual> {
	void read(TypeInput& in, ::vnx::query::LessEqual& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::LessEqual& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::LessEqual& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::LessEqual& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::LessEqual& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Limit> {
	void read(TypeInput& in, ::vnx::query::Limit& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Limit& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Limit& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Limit& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Limit& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Max> {
	void read(TypeInput& in, ::vnx::query::Max& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Max& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Max& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Max& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Max& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Min> {
	void read(TypeInput& in, ::vnx::query::Min& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Min& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Min& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Min& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Min& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::NotEqual> {
	void read(TypeInput& in, ::vnx::query::NotEqual& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::NotEqual& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::NotEqual& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::NotEqual& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::NotEqual& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::NotNull> {
	void read(TypeInput& in, ::vnx::query::NotNull& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::NotNull& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::NotNull& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::NotNull& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::NotNull& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Or> {
	void read(TypeInput& in, ::vnx::query::Or& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Or& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Or& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Or& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Or& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::OrderBy> {
	void read(TypeInput& in, ::vnx::query::OrderBy& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::OrderBy& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::OrderBy& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::OrderBy& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::OrderBy& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Query> {
	void read(TypeInput& in, ::vnx::query::Query& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Query& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Query& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Query& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Query& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Select> {
	void read(TypeInput& in, ::vnx::query::Select& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Select& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Select& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Select& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Select& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Sum> {
	void read(TypeInput& in, ::vnx::query::Sum& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Sum& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Sum& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Sum& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Sum& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Update> {
	void read(TypeInput& in, ::vnx::query::Update& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Update& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Update& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Update& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Update& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

template<>
struct type<::vnx::query::Value> {
	void read(TypeInput& in, ::vnx::query::Value& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::query::Value& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::query::Value& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::query::Value& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::query::Value& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};


} // namespace vnx

#endif // INCLUDE_vnx_query_PACKAGE_HXX_
